# bot.py
import asyncio
import logging
from typing import Optional

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

log = logging.getLogger("BOT")


def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [
            InlineKeyboardButton(text="üü¢ –°—Ç–∞—Ä—Ç", callback_data="start"),
            InlineKeyboardButton(text="üî¥ –°—Ç–æ–ø", callback_data="stop"),
        ],
    ])


class TgBot:
    """
    –õ—ë–≥–∫–∏–π Telegram-–±–æ—Ç:
      - /start –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
      - ¬´–ë–∞–ª–∞–Ω—Å¬ª –≤—ã–∑—ã–≤–∞–µ—Ç trader.refresh_equity()
      - ¬´–°—Ç–∞—Ä—Ç/–°—Ç–æ–ø¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å—ã (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π/–ª—É–ø–æ–º)
      - notify(text) ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Ç–∫–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ (—Å–∏–≥–Ω–∞–ª, LLM-—Ä–µ—à–µ–Ω–∏–µ, –æ—Ä–¥–µ—Ä–∞)

    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
        tg = TgBot(token=..., chat_id=..., trader=trader)
        await tg.start_background()   # –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–ª–∏–Ω–≥
        await tg.notify("–±–æ—Ç –≥–æ—Ç–æ–≤")

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
      chat_id –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å ‚Äî –±–æ—Ç —Å–∞–º –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –ø–µ—Ä–≤—ã–π /start –∏ –∫—ç—à–Ω–µ—Ç chat_id.
    """

    def __init__(self, token: str, chat_id: Optional[int] = None, trader=None):
        self.bot = Bot(token=token, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher()
        self.router = Router()
        self.dp.include_router(self.router)

        self.trader = trader
        self.chat_id = chat_id
        self._running_flag = False  # –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫

        self._register_handlers()

    # ---------------- Handlers ----------------

    def _register_handlers(self):
        @self.router.message(Command("start"))
        async def on_start(message: Message):
            # –µ—Å–ª–∏ chat_id –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∫—ç—à–∏—Ä—É–µ–º
            if not self.chat_id:
                self.chat_id = message.chat.id
                log.info(f"[BOT] bind chat_id={self.chat_id}")

            await message.answer(
                "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
                reply_markup=kb_main(),
            )

        @self.router.callback_query(F.data == "balance")
        async def on_balance(cb: CallbackQuery):
            if not self.trader:
                await cb.message.answer("–¢—Ä–µ–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await cb.answer()
                return
            eq = self.trader.refresh_equity()
            await cb.message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{eq:.2f} USDT</b>")
            await cb.answer()

        @self.router.callback_query(F.data == "start")
        async def on_start_trade(cb: CallbackQuery):
            self._running_flag = True
            await cb.message.answer("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è: <b>ON</b>")
            await cb.answer()

        @self.router.callback_query(F.data == "stop")
        async def on_stop_trade(cb: CallbackQuery):
            self._running_flag = False
            await cb.message.answer("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è: <b>OFF</b>")
            await cb.answer()

        # /help (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        @self.router.message(Command("help"))
        async def on_help(message: Message):
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
                "‚Ä¢ /start ‚Äî –º–µ–Ω—é\n"
                "‚Ä¢ –ö–Ω–æ–ø–∫–∏: –ë–∞–ª–∞–Ω—Å / –°—Ç–∞—Ä—Ç / –°—Ç–æ–ø\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Å–∏–≥–Ω–∞–ª—ã, –æ—Ç–≤–µ—Ç—ã –ò–ò, –æ—Ä–¥–µ—Ä–∞"
            )

    # ---------------- Public API ----------------

    async def start_background(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç).
        –í main.py –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ:  asyncio.create_task(bot.start_background())
        """
        async def _poll():
            try:
                log.info("[BOT] polling start")
                await self.dp.start_polling(self.bot)
            except asyncio.CancelledError:
                pass
            except Exception as e:
                log.error(f"[BOT] polling error: {e}")

        asyncio.create_task(_poll(), name="tg-polling")

    async def notify(self, text: str):
        """
        –ö–æ—Ä–æ—Ç–∫–∏–µ –∞–ø–¥–µ–π—Ç—ã (—Å–∏–≥–Ω–∞–ª—ã, LLM-–æ—Ç–≤–µ—Ç, –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥, TP/SL).
        –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏–º, –µ—Å–ª–∏ chat_id –µ—â—ë –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω (–ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ /start).
        """
        if not self.chat_id:
            log.debug("[BOT] notify skipped (no chat_id yet)")
            return
        try:
            await self.bot.send_message(self.chat_id, text)
        except Exception as e:
            log.error(f"[BOT][ERR] {e}")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    async def shutdown(self):
        try:
            await self.bot.session.close()
        except Exception:
            pass
        log.info("[BOT] shutdown")
import asyncio
import inspect
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import CFG
from trader import trader
from log import log
from aiogram.client.default import DefaultBotProperties

bot = Bot(CFG.telegram_token, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- Reply keyboard with control buttons ---
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start"), KeyboardButton(text="/stop")],
        [KeyboardButton(text="/status"), KeyboardButton(text="/balance")],
        [KeyboardButton(text="/mode"), KeyboardButton(text="/sr")],
        [KeyboardButton(text="/settings"), KeyboardButton(text="/ping")],
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞: –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await message.answer("‚ôªÔ∏è –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫‚Ä¶", reply_markup=kb)
    try:
        # –°–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é —Ä—É—á–Ω—É—é –ø–∞—É–∑—É
        try:
            if getattr(trader, "manual_paused", False):
                setattr(trader, "manual_paused", False)
        except Exception:
            pass
        if getattr(trader, "is_running", False):
            try:
                await trader.stop()
            except Exception as e:
                log.error(f"[TG]/start trader.stop() error={e}")
            # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏–ª–∏—Å—å —Ä–µ—Å—É—Ä—Å—ã
            await asyncio.sleep(0.2)
        # –°—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Ç—Ä–µ–π–¥–µ—Ä–∞
        asyncio.create_task(trader.start())
        await message.answer("üöÄ –¢—Ä–µ–π–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=kb)
    except Exception as e:
        log.error(f"[TG]/start error={e}")
        await message.answer(f"‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å: {e}")

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    await message.answer("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å: –∑–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å—Ç–æ–ø–ª—é —Ü–∏–∫–ª‚Ä¶")
    # 1) –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏/–æ—Ä–¥–µ—Ä–∞ (best-effort)
    try:
        if hasattr(trader, "close_all_positions") and callable(getattr(trader, "close_all_positions")):
            await trader.close_all_positions()
        elif hasattr(trader, "close_all") and callable(getattr(trader, "close_all")):
            await trader.close_all()
        elif hasattr(trader, "flatten") and callable(getattr(trader, "flatten")):
            await trader.flatten()
    except Exception as e:
        log.error(f"[TG]/stop close_all error={e}")
    # 2) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
    try:
        if hasattr(trader, "stop") and callable(getattr(trader, "stop")):
            await trader.stop()
        setattr(trader, "is_running", False)
        # –§–ª–∞–≥ —Ä—É—á–Ω–æ–π –ø–∞—É–∑—ã, —á—Ç–æ–±—ã –ø–æ /start —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —è–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        setattr(trader, "manual_paused", True)
    except Exception as e:
        log.error(f"[TG]/stop trader.stop() error={e}")
    # 3) –ù–ò–ß–ï–ì–û –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º ‚Äî –∂–¥—ë–º —è–≤–Ω–æ–π /start
    await message.answer("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã (–µ—Å–ª–∏ –±—ã–ª–∏). –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏ /start.")

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    await message.answer(f"Mode={trader.mode}, S={trader.support}, R={trader.resistance}")


# --- /balance handler ---
@dp.message(Command("balance"))
async def cmd_balance(message: types.Message):
    # Best-effort: –±–µ—Ä–µ–º –∏–∑ —Ç—Ä–µ–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥; –∏–Ω–∞—á–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    text = None
    try:
        if hasattr(trader, "wallet_text"):
            fn = getattr(trader, "wallet_text")
            if inspect.iscoroutinefunction(fn):
                text = await fn()
            else:
                text = fn()
        elif hasattr(trader, "wallet_snapshot"):
            snap = await trader.wallet_snapshot()  # –æ–∂–∏–¥–∞–µ–º dict/str
            text = f"üí∞ –ë–∞–ª–∞–Ω—Å: {snap}"
    except Exception as e:
        log.error(f"[TG] /balance error={e}")
    await message.answer(text or "üí∞ –ë–∞–ª–∞–Ω—Å: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å")


# --- /mode handler ---
@dp.message(Command("mode"))
async def cmd_mode(message: types.Message):
    await message.answer(f"üìà –†–µ–∂–∏–º: <b>{getattr(trader, 'mode', 'n/a')}</b>")


# --- /sr handler ---
@dp.message(Command("sr"))
async def cmd_sr(message: types.Message):
    s = getattr(trader, "support", None)
    r = getattr(trader, "resistance", None)
    await message.answer(f"üîß –£—Ä–æ–≤–Ω–∏:\nS={s}\nR={r}")


# --- /settings handler ---
@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∞–º–ø –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    fields = {
        "env": CFG.bybit_env,
        "category": CFG.bybit_category,
        "symbol": CFG.symbol,
        "leverage": getattr(CFG, "leverage", None),
        "risk_pct": getattr(CFG, "risk_pct", None),
        "telegram_chat_id": CFG.telegram_chat_id,
        "verify_ssl": getattr(CFG, "verify_ssl", True),
    }
    lines = "\n".join(f"{k} = {v}" for k, v in fields.items())
    await message.answer(f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n<code>{lines}</code>")

@dp.message(Command("ping"))
async def cmd_ping(message: types.Message):
    await message.answer("pong")

async def notify(text: str):
    if CFG.telegram_chat_id:
        try:
            await bot.send_message(CFG.telegram_chat_id, text)
        except Exception as e:
            log.error(f"[TG] notify error={e}")


async def notify_trade_open(
    *,
    symbol: str,
    side: str,
    qty: str,
    entry_price: float,
    stop_loss: float | None,
    take_profit: float | None,
    reason: str,
    expected_exit: str | None = None,
    order_id: str | None = None,
    position_idx: int | None = None
):
    """
    –¢–µ–ª–µ–≥—Ä–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.
    """
    sl = f"{stop_loss}" if stop_loss is not None else "‚Äî"
    tp = f"{take_profit}" if take_profit is not None else "‚Äî"
    exp = expected_exit or "–ø–æ —Å–∏–≥–Ω–∞–ª—É/TP/SL"
    oid = f"\nüÜî orderId: <code>{order_id}</code>" if order_id else ""
    pidx = f" (idx={position_idx})" if position_idx is not None else ""
    text = (
        f"üü¢ <b>–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>{pidx}\n"
        f"{symbol} {side} qty={qty}\n"
        f"–í—Ö–æ–¥: <b>{entry_price}</b>\n"
        f"SL: <b>{sl}</b> | TP: <b>{tp}</b>\n"
        f"–û–∂–∏–¥–∞–µ–º–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: {exp}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>{oid}"
    )
    await notify(text)


async def notify_close(
    *,
    symbol: str,
    side: str,
    qty: str,
    exit_price: float,
    pnl: float | None = None,
    reason: str | None = None,
    order_id: str | None = None
):
    """
    –¢–µ–ª–µ–≥—Ä–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.
    """
    pnl_text = f"\nP/L: <b>{pnl}</b>" if pnl is not None else ""
    why = f"\n–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>" if reason else ""
    oid = f"\nüÜî orderId: <code>{order_id}</code>" if order_id else ""
    text = (
        f"üî¥ <b>–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>\n"
        f"{symbol} {side} qty={qty}\n"
        f"–í—ã—Ö–æ–¥: <b>{exit_price}</b>{pnl_text}{why}{oid}"
    )
    await notify(text)

# wire notifications into trader (no circular import because trader doesn't import bot anymore)
try:
    if hasattr(trader, "set_notifiers"):
        trader.set_notifiers(notify_trade_open, notify_close)
        log.info("[TG] notifiers wired: trade_open & trade_close callbacks set")
except Exception as e:
    log.error(f"[TG] failed to set notifiers: {e}")

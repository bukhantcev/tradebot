# trader.py
import math
import logging
from typing import Optional, Dict, Any
import asyncio
import os
import time
from datetime import datetime, timezone
from config import SYMBOL, RISK_PCT, LEVERAGE
from bybit_client import BybitClient

log = logging.getLogger("TRADER")


class Trader:
    __lp_fail = 0
    """
    –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä:
    - refresh_equity(): –ø–æ–ª—É—á–∏—Ç—å equity (USDT) –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    - ensure_filters(): —Ä–∞–∑–æ–≤–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å tickSize/qtyStep/min
    - ensure_leverage(): —Å—Ç–∞–≤–∏—Ç –ø–ª–µ—á–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    - open_market(side, signal): –º–∞—Ä–∫–µ—Ç-–≤—Ö–æ–¥ + TPSL
    - close_market(side, qty): –º–∞—Ä–∫–µ—Ç-–≤—ã—Ö–æ–¥
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π notifier: –æ–±—ä–µ–∫—Ç —Å notify(str).
    """

    def __init__(
        self,
        client: BybitClient,
        symbol: str = SYMBOL,
        risk_pct: float = RISK_PCT,
        leverage: float = LEVERAGE,
        notifier: Optional[Any] = None,
    ):
        self.client = client
        self.symbol = symbol
        self.risk_pct = float(risk_pct)
        self.leverage = float(leverage)
        self.notifier = notifier

        # –∫—ç—à –º–∞—Ä–∫–µ—Ç-—Ñ–∏–ª—å—Ç—Ä–æ–≤
        self._filters: Optional[Dict[str, float]] = None
        # –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è equity (USDT)
        self.equity: float = 0.0
        self.available: float = 0.0  # –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –º–∞—Ä–∂–∏ (USDT)
        # —Ä–µ–∂–∏–º –≤—Ö–æ–¥–∞ –ø–æ —ç–∫—Å—Ç—Ä–µ–º–∞–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ (–≤—ã–∫–ª. –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.entry_extremes: bool = os.getenv("ENTRY_EXTREMES", "0") == "1"
        # —Å—É–∑–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –Ω–∞ N —Ç–∏–∫–æ–≤ –≤–Ω—É—Ç—Ä—å (—ç–∫—Å—Ç—Ä–µ–º-—Ä–µ–∂–∏–º)
        try:
            self.ext_eps_ticks = int(os.getenv("EXT_EPS_TICKS", "2"))
        except Exception:
            self.ext_eps_ticks = 2
        # —Ç–∞—Å–∫ –º–∏–Ω—É—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self._minute_task = None
        self._minute_mode: str = "normal"
        self._minute_sl: float | None = None
    def _round_down_qty(self, qty: float) -> float:
        """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤–Ω–∏–∑ —Å —É—á—ë—Ç–æ–º —à–∞–≥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞; –∑–∞–ø–∞—Å–Ω–æ–π —à–∞–≥ 0.001."""
        try:
            f = self.ensure_filters()
            step = float(f.get("qtyStep", 0.001))
        except Exception:
            step = 0.001
        if step <= 0:
            step = 0.001
        n = int(qty / step)
        return max(step, n * step)

    def _start_minute_logger(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –æ–±—â–∏–π –º–∏–Ω—É—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä; —Ä–µ–∂–∏–º/SL –±–µ—Ä—É—Ç—Å—è –∏–∑ self._minute_mode/_minute_sl."""
        if self._minute_task and not self._minute_task.done():
            return
        import asyncio, time
        async def _loop():
            last_min = int(time.time() // 60)
            while True:
                try:
                    # sleep first to avoid hot loop on immediate reschedules
                    await asyncio.sleep(1.0)
                    m = int(time.time() // 60)
                    if m != last_min:
                        last_min = m
                        try:
                            px = self._last_price()
                        except Exception:
                            px = 0.0
                        try:
                            side, sz = self._position_side_and_size()
                        except Exception:
                            side, sz = (None, 0.0)
                        sl_price = self._minute_sl
                        mode = self._minute_mode
                        log.info(
                            f"[STAT][MIN] mode={mode} px={self._fmt(px)} pos={side or 'Flat'} size={self._fmt(sz)} SL={(self._fmt(sl_price) if sl_price else 'None')}"
                        )
                except asyncio.CancelledError:
                    log.info("[MIN][LOOP] cancelled")
                    break
                except Exception:
                    # backoff on any unexpected exception to avoid tight spinning
                    await asyncio.sleep(2.0)
        self._minute_task = asyncio.create_task(_loop(), name="minute_stat")
        log.info("[MIN][START] minute logger started")

    def set_minute_status(self, mode: str, sl_price: float | None):
        self._minute_mode = mode
        self._minute_sl = sl_price
        log.info(f"[MIN][MODE] set mode={mode} SL={(self._fmt(sl_price) if sl_price else 'None')}")
        self._start_minute_logger()

    async def _stop_minute_logger(self):
        t = self._minute_task
        if t and not t.done():
            try:
                t.cancel()
                import asyncio as _a
                try:
                    await _a.wait_for(t, timeout=1.0)
                    log.info("[MIN][STOP] minute logger stopped")
                except _a.TimeoutError:
                    log.warning("[MIN][STOP][TIMEOUT] cancel wait timed out; detaching task")
                except Exception as e:
                    log.warning(f"[MIN][STOP][EXC] {e}")
            finally:
                self._minute_task = None
        else:
            self._minute_task = None

    # ---------- –£–¢–ò–õ–´ ----------

    def _round_step(self, value: float, step: float) -> float:
        if step <= 0:
            return value
        return math.floor(value / step + 1e-12) * step

    def _ceil_step(self, value: float, step: float) -> float:
        if step <= 0:
            return value
        return math.ceil(value / step - 1e-12) * step

    def _fmt(self, x: float) -> str:
        return f"{x:.6f}".rstrip("0").rstrip(".")

    def _fix_tpsl(self, side: str, price: float, sl: float, tp: float, tick: float) -> (float, float):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç SL/TP –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã –∏ —Ç–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 30208 –Ω–∞ order.create.
          ‚Ä¢ Buy:  SL < price, TP > price  (–º–∏–Ω–∏–º—É–º –Ω–∞ 1 —Ç–∏–∫ –æ—Ç —Ü–µ–Ω—ã)
          ‚Ä¢ Sell: SL > price, TP < price
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (sl_fixed, tp_fixed) —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –Ω–∞ 1‚Äì2 —Ç–∏–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        """
        p = float(price)
        sl_f, tp_f = float(sl), float(tp)
        t = max(float(tick), 0.0) or 0.1

        if side == "Buy":
            # SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∏–∂–µ —Ü–µ–Ω—ã, TP ‚Äî —Å—Ç—Ä–æ–≥–æ –≤—ã—à–µ
            if sl_f >= p:
                sl_f = p - t
            if tp_f <= p:
                tp_f = p + t
            # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É, —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–∏—Ä–∂–∏
            sl_f = self._round_step(sl_f, t)  # –≤–Ω–∏–∑ –ø–æ —Ç–∏–∫—É
            tp_f = self._ceil_step(tp_f, t)   # –≤–≤–µ—Ä—Ö –ø–æ —Ç–∏–∫—É
            # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Ä–∞–∑–Ω–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ 1 —Ç–∏–∫
            if sl_f >= p:
                sl_f = p - 2 * t
            if tp_f <= p:
                tp_f = p + 2 * t
        else:  # Sell
            if sl_f <= p:
                sl_f = p + t
            if tp_f >= p:
                tp_f = p - t
            sl_f = self._ceil_step(sl_f, t)   # –≤–≤–µ—Ä—Ö –ø–æ —Ç–∏–∫—É
            tp_f = self._round_step(tp_f, t)  # –≤–Ω–∏–∑ –ø–æ —Ç–∏–∫—É
            if sl_f <= p:
                sl_f = p + 2 * t
            if tp_f >= p:
                tp_f = p - 2 * t

        return sl_f, tp_f

    # ---------- –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ----------

    def refresh_equity(self) -> float:
        """–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞: totalEquity –∏ totalAvailableBalance"""
        try:
            r = self.client.wallet_balance(account_type="UNIFIED")
            lst = r["result"]["list"][0]
            usdt_total = float(lst["totalEquity"])
            usdt_avail = float(lst.get("totalAvailableBalance") or lst.get("availableBalance") or usdt_total)
            self.equity = usdt_total
            self.available = usdt_avail
            log.info(f"[BALANCE] equity={usdt_total:.2f} avail={usdt_avail:.2f} USDT")
            if self.notifier:
                try:
                    import asyncio
                    asyncio.create_task(self.notifier.notify(f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt_total:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ {usdt_avail:.2f})"))
                except Exception:
                    pass
            return usdt_total
        except Exception as e:
            log.error(f"[BALANCE][ERR] {e}")
            return 0.0

    def ensure_filters(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å tickSize / qtyStep / minOrderQty (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è)"""
        if self._filters:
            return self._filters
        r = self.client.instruments_info(category="linear", symbol=self.symbol)
        it = r.get("result", {}).get("list", [{}])[0]
        tick = float(it.get("priceFilter", {}).get("tickSize", "0.1"))
        qty_step = float(it.get("lotSizeFilter", {}).get("qtyStep", "0.001"))
        min_qty = float(it.get("lotSizeFilter", {}).get("minOrderQty", "0.001"))
        mov = float(it.get("lotSizeFilter", {}).get("minOrderValue", "0") or 0.0)
        self._filters = {"tickSize": tick, "qtyStep": qty_step, "minQty": min_qty, "minNotional": mov}
        log.debug(f"[FILTERS] {self._filters}")
        return self._filters

    def ensure_leverage(self):
        """–°—Ç–∞–≤–∏—Ç –ø–ª–µ—á–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–ø–æ–¥–∞–≤–ª—è–µ–º 110043 –∫–∞–∫ –Ω–æ—Ä–º—É)"""
        try:
            pl = self.client.position_list(self.symbol)
            # Bybit –º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç
            cur_lev = float(pl.get("result", {}).get("list", [{}])[0].get("leverage") or 0.0)
            if abs(cur_lev - self.leverage) < 1e-9:
                log.debug(f"[LEV] already {cur_lev}x")
                return
        except Exception as e:
            log.debug(f"[LEV] read failed: {e}")
        r = self.client.set_leverage(self.symbol, self.leverage, self.leverage)
        rc = r.get("retCode")
        if rc in (0, 110043):  # 110043 = leverage not modified
            log.info(f"[LEV] {self.leverage}x OK")
        else:
            log.warning(f"[LEV] rc={rc} msg={r.get('retMsg')}")

    # ---------- –†–ê–°–ß–Å–¢ QTY ----------

    def _calc_qty(self, side: str, price: float, sl: float) -> float:
        """
        –°—á–∏—Ç–∞–µ–º qty –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–∑:
          ‚Ä¢ —Ä–∏—Å–∫-–±–µ–π–∑–¥:  qty_risk = (equity * risk_pct) / stop_dist
          ‚Ä¢ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–∞—Ä–∂–µ: qty_afford = available / (price/leverage * fee_buf)
        –ó–∞—Ç–µ–º –ø—Ä–∏–≤–æ–¥–∏–º –∫ —à–∞–≥—É qtyStep –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.
        """
        f = self.ensure_filters()
        stop_dist = abs(price - sl)
        if stop_dist <= 0:
            return 0.0

        # 1) –ø–æ —Ä–∏—Å–∫—É (–ª–µ–≤–µ—Ä–∏–¥–∂ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∏—Å–∫ –≤ $)
        risk_amt = max(self.equity * self.risk_pct, 0.0)
        qty_risk = risk_amt / stop_dist

        # 2) –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–∞—Ä–∂–µ (—É—á—Ç—ë–º –±—É—Ñ–µ—Ä –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏/–ø–ª–∞–≤–∞—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
        FEE_BUF = 1.003
        margin_per_qty = price / max(self.leverage, 1.0)
        if margin_per_qty <= 0:
            return 0.0
        qty_afford = (self.available / (margin_per_qty * FEE_BUF)) if self.available > 0 else qty_risk

        # 3) –∏—Ç–æ–≥
        raw = max(0.0, min(qty_risk, qty_afford))
        qty = self._round_step(raw, f["qtyStep"])
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if qty < f["minQty"]:
            return 0.0
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è (–µ—Å–ª–∏ –±–∏—Ä–∂–∞ —Ç—Ä–µ–±—É–µ—Ç)
        min_notional = f.get("minNotional", 0.0) or 0.0
        if min_notional > 0 and (qty * price) < min_notional:
            return 0.0
        return qty

    async def _wait_position_open(self, timeout: float = 10.0, interval: float = 0.3) -> bool:
        """
        –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (size&gt;0), —á—Ç–æ–±—ã fallback trading-stop –Ω–µ –ø–∞–¥–∞–ª rc=10001.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ timeout.
        """
        import time
        deadline = time.monotonic() + timeout
        while time.monotonic() < deadline:
            try:
                pl = self.client.position_list(self.symbol)
                lst = pl.get("result", {}).get("list", [])
                # –ü—Ä–æ–π–¥—ë–º –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º (–Ω–∞ —Å–ª—É—á–∞–π hedge-mode/–¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω)
                for it in lst:
                    size_str = it.get("size") or it.get("positionValue") or ""
                    try:
                        size = float(size_str) if size_str != "" else 0.0
                    except Exception:
                        size = 0.0
                    if size > 0:
                        return True
            except Exception:
                pass
            await asyncio.sleep(interval)
        return False

    async def _await_fill_or_retry(self, order_id: str, side: str, qty: float) -> bool:
        """
        –ñ–¥—ë–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ä–¥–µ—Ä–∞. –ï—Å–ª–∏ –æ–Ω –æ—Ç–º–µ–Ω—ë–Ω –±–µ–∑ —Ñ–∏–ª–∞ ‚Äî –¥–µ–ª–∞–µ–º –¥–æ –¥–≤—É—Ö —Ä–µ—Ç—Ä–∞–µ–≤
        —Å —É–º–Ω—ã–º –º–∞—Ä–∫–µ—Ç–æ–º –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –¥–æ–ø—É—Å–∫–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å; –∏–Ω–∞—á–µ False.
        """
        # 1) –ü–æ–¥–æ–∂–¥–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        ok = await self._wait_position_open(timeout=10.0, interval=0.3)
        if ok:
            return True

        # 2) –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        try:
            st = self.client.get_order_status(self.symbol, order_id)
        except Exception:
            st = {"status": None, "cumExecQty": 0.0, "qty": 0.0}
        status = (st.get("status") or "").lower()
        filled = float(st.get("cumExecQty") or 0.0) > 0.0

        if filled or status in ("filled", "partiallyfilled"):
            # –∏–Ω–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —á—É—Ç—å-—á—É—Ç—å
            ok2 = await self._wait_position_open(timeout=5.0, interval=0.3)
            return ok2

        if status in ("cancelled", "rejected") or not status:
            log.warning(f"[ORDER][CANCELLED] status={status or 'n/a'} -> retry smart market")

            # –†–µ—Ç—Ä–∞–π #1: —É–º–Ω—ã–π –º–∞—Ä–∫–µ—Ç —Å 0.10% –¥–æ–ø—É—Å–∫–∞
            r = self.client.place_market_safe(self.symbol, side, qty, position_idx=0, slip_percent=0.10)
            if r.get("retCode") == 0:
                oid = r.get("result", {}).get("orderId", "")
                log.info(f"[ORDER][RETRY1] OK id={oid}")
                if await self._wait_position_open(timeout=10.0, interval=0.3):
                    return True

            # –†–µ—Ç—Ä–∞–π #2: 0.20%
            r = self.client.place_market_safe(self.symbol, side, qty, position_idx=0, slip_percent=0.20)
            if r.get("retCode") == 0:
                oid = r.get("result", {}).get("orderId", "")
                log.info(f"[ORDER][RETRY2] OK id={oid}")
                if await self._wait_position_open(timeout=10.0, interval=0.3):
                    return True

            log.error("[ORDER][FAIL] no fill after retries")
            return False

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å ¬´new/created¬ª ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        for _ in range(20):
            if await self._wait_position_open(timeout=1.0, interval=0.3):
                return True
        return False

    # ---------- –¢–ò–ö–ò / –†–´–ù–û–ß–ù–ê–Ø –¶–ï–ù–ê ----------
    def _last_price(self) -> float:
        """–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ /v5/market/tickers (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π)."""
        try:
            r = self.client._request("GET", "/v5/market/tickers", params={"category": "linear", "symbol": self.symbol})
            it = (r.get("result", {}) or {}).get("list", [])
            if it:
                self.__lp_fail = 0
                return float(it[0].get("lastPrice") or 0.0)
        except Exception:
            pass
        self.__lp_fail += 1
        if self.__lp_fail % 20 == 0:
            log.warning(f"[EXT][LP] lastPrice=0 (#{self.__lp_fail})")
        return 0.0

    def _position_side_and_size(self) -> tuple[str|None, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (side, size) –ø–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ (None, 0.0)."""
        try:
            pl = self.client.position_list(self.symbol)
            lst = pl.get("result", {}).get("list", [])
            for it in lst:
                size = float(it.get("size") or 0.0)
                if size > 0:
                    return (it.get("side"), size)
        except Exception:
            pass
        return (None, 0.0)

    def _opposite(self, side: str) -> str:
        return "Sell" if side == "Buy" else "Buy"

    # ---------- –£–°–õ–û–í–ù–´–ï –û–†–î–ï–†–ê –ü–û –≠–ö–°–¢–†–ï–ú–ê–ú ----------

    # ---------- –õ–ò–ú–ò–¢–ù–´–ï –û–†–î–ï–†–ê –ü–û –≠–ö–°–¢–†–ï–ú–ê–ú ----------
    async def _enter_extremes_with_limits(self, side: str, prev_high: float, prev_low: float, qty: float, sl: float, tp: float):
        """
        –≠–∫—Å—Ç—Ä–µ–º-—Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ –õ–ò–ú–ò–¢–ù–´–ï –æ—Ä–¥–µ—Ä–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–æ–π:
          ‚Ä¢ –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø–æ–ª—É—á–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ó–ê–ö–†–´–¢–û–ô 1m-—Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ REST /v5/market/kline.
          ‚Ä¢ –°—Ç–∞–≤–∏–º –ª–∏–º–∏—Ç –Ω–∞ –≤—Ö–æ–¥ —á—É—Ç—å –≤–Ω—É—Ç—Ä–∏ —É—Ä–æ–≤–Ω—è (Œµ = EXT_EPS_TICKS * tickSize).
          ‚Ä¢ –ñ–¥—ë–º –¥–æ 60—Å. –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è ‚Äî –æ—Ç–º–µ–Ω—è–µ–º, –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –Ω–æ–≤—ã–º —ç–∫—Å—Ç—Ä–µ–º–∞–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º.
          ‚Ä¢ –ü–æ—Å–ª–µ —Ñ–∏–ª–∞ ‚Äî —Å—Ç–∞–≤–∏–º TP/SL —á–µ—Ä–µ–∑ trading-stop (Full) –∏ –≤—ã—Ö–æ–¥–∏–º.
        """
        # sanity
        if qty <= 0:
            log.info("[EXT][LIM][SKIP] qty<=0")
            return

        f = self.ensure_filters()
        tick = float(f.get("tickSize", 0.1) or 0.1)
        eps_ticks = max(1, int(self.ext_eps_ticks))
        eps = max(tick * eps_ticks, tick)

        async def _prev_hl_rest() -> tuple[float|None, float|None]:
            """–ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ó–ê–ö–†–´–¢–û–ô 1m-—Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ /v5/market/kline."""
            try:
                r = self.client._request(
                    "GET",
                    "/v5/market/kline",
                    params={"category": "linear", "symbol": self.symbol, "interval": "1", "limit": 3},
                )
                kl = (r.get("result", {}) or {}).get("list", [])
                # –û—Ç–≤–µ—Ç Bybit –¥–ª—è kline ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç —Å—Ç–∞—Ä–æ–π –∫ –Ω–æ–≤–æ–π –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç; –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                # –í–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é —Å–≤–µ—á—É (confirm=true); –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é
                # –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–∞–º–∏ —Å—Ç—Ä–æ–∫: [start,open,high,low,close,volume,turnover]
                # –í V5 REST confirm –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é.
                if not kl:
                    return (None, None)
                if len(kl) >= 2:
                    last = kl[-2]
                else:
                    last = kl[-1]
                # –§–æ—Ä–º–∞—Ç—ã –±—ã–≤–∞—é—Ç dict –∏–ª–∏ list
                def _get(v, idx):
                    try:
                        if isinstance(v, dict):
                            return float(v.get(idx) or v.get(idx.lower()) or 0.0)
                        return float(v[idx])
                    except Exception:
                        return 0.0
                # –í REST v5 list —Ñ–æ—Ä–º–∞—Ç: [start,open,high,low,close,volume,turnover]
                ph = _get(last, 2)
                pl = _get(last, 3)
                return (ph if ph > 0 else None, pl if pl > 0 else None)
            except Exception:
                return (None, None)

        # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ prev_high/prev_low ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø–µ—Ä–≤—ã–π —à–∞–≥
        cur_prev_high = float(prev_high or 0.0)
        cur_prev_low  = float(prev_low or 0.0)

        # –∞–∫—Ç–∏–≤–Ω—ã–π id —Ç–µ–∫—É—â–µ–≥–æ –ª–∏–º–∏—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ —Å—Ç–æ–∏—Ç)
        active_oid: str | None = None
        # –æ—Ö—Ä–∞–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∫–∞–Ω—Å–µ–ª–∞
        max_cycles = 120  # –º–∞–∫—Å–∏–º—É–º 2 —á–∞—Å–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–æ 1 –º–∏–Ω—É—Ç–µ

        for cycle in range(max_cycles):
            # 1) –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ ‚Äî –ø–æ–¥—Ç—è–Ω–µ–º –ø–æ REST
            if cur_prev_high <= 0 or cur_prev_low <= 0:
                ph, pl = await _prev_hl_rest()
                if ph and pl:
                    cur_prev_high, cur_prev_low = ph, pl
                else:
                    log.info("[EXT][LIM][SKIP] no prev HL from REST; retry in 5s")
                    await asyncio.sleep(5)
                    continue

            # 2) –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∏ —Ü–µ–ª–µ–≤—ã–µ SL/TP –æ—Ç —Ç–µ–∫—É—â–∏—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            if side == "Buy":
                entry_price = self._ceil_step(cur_prev_low + eps, tick)
                tp_ref = float(tp) if (tp and tp > 0) else (cur_prev_high - eps)
                sl_ref = float(sl) if (sl and sl > 0) else (entry_price - 2 * tick)
                sl_adj, tp_adj = self._fix_tpsl("Buy", entry_price, sl_ref, tp_ref, tick)
            else:
                entry_price = self._round_step(cur_prev_high - eps, tick)
                tp_ref = float(tp) if (tp and tp > 0) else (cur_prev_low + eps)
                sl_ref = float(sl) if (sl and sl > 0) else (entry_price + 2 * tick)
                sl_adj, tp_adj = self._fix_tpsl("Sell", entry_price, sl_ref, tp_ref, tick)

            log.info(f"[EXT][LIM][PLACE] {side} limit entry={self._fmt(entry_price)} tp={self._fmt(tp_adj)} sl={self._fmt(sl_adj)} qty={self._fmt(qty)}")

            # 3) –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç–Ω–∏–∫ GTC —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ qty –∏ —Ä–µ—Ç—Ä–∞—è–º–∏ –ø–æ 110007
            # –ü–µ—Ä–µ–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ qty –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –±–∞–ª–∞–Ω—Å—É –Ω–∞ —ç—Ç–æ–π —Ü–µ–Ω–µ
            try:
                if self.available <= 0 or self.equity <= 0:
                    self.refresh_equity()
            except Exception:
                pass
            attempt_qty = min(qty, self._calc_qty(side, entry_price, sl_adj))
            f_loc = self.ensure_filters()
            min_qty = float(f_loc.get("minQty", 0.001))
            if attempt_qty < min_qty:
                log.error(f"[EXT][LIM][SKIP] qty not affordable at entry={self._fmt(entry_price)} -> {self._fmt(attempt_qty)} < min {self._fmt(min_qty)}")
                # –ø–æ–¥–æ–∂–¥—ë–º –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å–æ —Å–≤–µ–∂–∏–º–∏ HL
                await asyncio.sleep(60)
                cur_prev_high = cur_prev_low = 0.0
                continue
            # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É–∂–µ—Å—Ç–æ—á—ë–Ω–Ω—ã–º —Ä–µ—Ç—Ä–∞–µ–º –ø–æ 110007
            active_oid = None
            for _try in range(6):
                r = self.client.place_order(
                    self.symbol,
                    side,
                    attempt_qty,
                    order_type="Limit",
                    price=entry_price,
                    timeInForce="GTC",
                    position_idx=0,
                )
                rc = r.get("retCode")
                if rc == 0:
                    active_oid = r.get("result", {}).get("orderId", "")
                    log.info(f"[EXT][LIM][ORDER] id={active_oid} price={self._fmt(entry_price)} qty={self._fmt(attempt_qty)}")
                    break
                if rc == 110007:
                    # –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ ‚Äî —É–º–µ–Ω—å—à–∞–µ–º qty –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                    new_qty = self._round_down_qty(attempt_qty * 0.75)
                    if new_qty >= attempt_qty:
                        new_qty = self._round_down_qty(attempt_qty - float(f_loc.get('qtyStep', 0.001)))
                    if new_qty < min_qty:
                        log.error(f"[EXT][LIM][FAIL] 110007: insufficient balance, last qty={self._fmt(attempt_qty)} < min {self._fmt(min_qty)}")
                        active_oid = None
                        break
                    log.info(f"[EXT][LIM][RETRY_QTY] 110007 -> {self._fmt(attempt_qty)} -> {self._fmt(new_qty)}")
                    attempt_qty = new_qty
                    # –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Ü–∏–∫–ª–æ–º
                    continue
                # –∏–Ω—ã–µ –æ—à–∏–±–∫–∏
                log.error(f"[EXT][LIM][FAIL] place_order {r}")
                active_oid = None
                break
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∏–Ω—É—Ç–Ω–æ–º—É —Ü–∏–∫–ª—É
            if not active_oid:
                await asyncio.sleep(60)
                cur_prev_high = cur_prev_low = 0.0
                continue

            # 4) –ñ–¥–∞—Ç—å –¥–æ 60—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è; –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ HL
            end_ts = time.time() + 60
            filled = False
            while time.time() < end_ts:
                # –±—ã—Å—Ç—Ä–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if await self._wait_position_open(timeout=1.0, interval=0.25):
                    filled = True
                    break
                await asyncio.sleep(0.5)

            if not filled:
                # –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç–Ω–∏–∫
                try:
                    self._cancel_order(order_id=active_oid)
                except Exception:
                    pass
                log.warning("[EXT][LIM][REPLACE] no fill in 60s ‚Äî re-evaluate last closed HL")
                # –æ–±–Ω–æ–≤–∏–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
                ph, pl = await _prev_hl_rest()
                cur_prev_high = float(ph or 0.0)
                cur_prev_low = float(pl or 0.0)
                continue  # —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª

            # 5) –ò—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å ‚Äî —É–∑–Ω–∞–µ–º —Ñ–∞–∫—Ç. –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –∏ —Å—Ç–∞–≤–∏–º TP/SL
            actual_side = side
            base_price = entry_price
            try:
                pos = self.client.position_list(self.symbol)
                items = pos.get("result", {}).get("list", [])
                if items:
                    it = items[0]
                    actual_side = it.get("side") or side
                    b = float(it.get("avgPrice") or it.get("entryPrice") or 0.0)
                    if b > 0:
                        base_price = b
            except Exception:
                pass

            sl_final, tp_final = self._fix_tpsl(actual_side, base_price, sl_adj, tp_adj, tick)
            log.info(f"[EXT][LIM][TPSL] side={actual_side} base={self._fmt(base_price)} sl={self._fmt(sl_final)} tp={self._fmt(tp_final)}")

            tr = self.client.trading_stop(
                self.symbol,
                side=actual_side,
                stop_loss=sl_final,
                take_profit=tp_final,
                tpslMode="Full",
                positionIdx=0,
            )
            if tr.get("retCode") in (0, None):
                log.info(f"[EXT][LIM][TPSL][OK] sl={self._fmt(sl_final)} tp={self._fmt(tp_final)}")
            else:
                log.warning(f"[EXT][LIM][TPSL][FAIL] {tr}")

            return  # –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞

        log.warning("[EXT][LIM][ABORT] max cycles reached; stop")

    # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–º–∏—Ç–Ω–∏–∫–∞ –ø–æ orderId (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â—ë)
    def _order_status_brief(self, order_id: str) -> str:
        try:
            st = self.client.get_order_status(self.symbol, order_id)
            s = (st.get("status") or "").lower()
            ce = float(st.get("cumExecQty") or 0.0)
            q = float(st.get("qty") or 0.0)
            return f"{s or 'n/a'} {ce}/{q}"
        except Exception:
            return "n/a"

    # NOTE: –Ω–∏–∂–µ ‚Äî —Å—Ç–∞—Ä–∞—è –≤–µ—Ç–∫–∞ —Å —É—Å–ª–æ–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏; –¥–ª—è live-follow –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    def _place_conditional(self, side: str, trigger_price: float, qty: float, trigger_direction: int) -> Dict[str, Any]:
        """
        –°—Ç–∞–≤–∏—Ç —É—Å–ª–æ–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä (IOC) –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é trigger_price.
        trigger_direction: 1 = —Ç—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏ —Ä–æ—Å—Ç–µ –¥–æ —Ü–µ–Ω—ã, 2 = –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –¥–æ —Ü–µ–Ω—ã.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç API.
        """
        body = {
            "category": "linear",
            "symbol": self.symbol,
            "side": side,
            "orderType": "Market",
            "qty": self._fmt(qty),
            "timeInForce": "IOC",
            "positionIdx": 0,
            "triggerPrice": self._fmt(trigger_price),
            "triggerDirection": trigger_direction,
        }
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π orderLinkId –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ—Ç–º–µ–Ω—ã/–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        body["orderLinkId"] = f"ext-{int(time.time()*1000)}-{side[0].lower()}"
        return self.client._request("POST", "/v5/order/create", body=body)

    def _cancel_order(self, order_id: Optional[str] = None, order_link_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ/—É—Å–ª–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.
        """
        body = {
            "category": "linear",
            "symbol": self.symbol,
        }
        if order_id:
            body["orderId"] = order_id
        if order_link_id:
            body["orderLinkId"] = order_link_id
        return self.client._request("POST", "/v5/order/cancel", body=body)

    # ---------- –û–†–î–ï–†–ê ----------

    async def _enter_by_extremes(self, side: str, prev_high: float, prev_low: float, qty: float, sl_r: float, tp_r: float):
        """
        –°—Ç–∞–≤–∏—Ç –¥–≤–µ —É—Å–ª–æ–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:
          ‚Ä¢ Sell –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ prev_high (triggerDirection=1),
          ‚Ä¢ Buy –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ prev_low (triggerDirection=2).
        –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è ‚Äî –≤—Ç–æ—Ä–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è. –ó–∞—Ç–µ–º —Å—Ç–∞–≤–∏–º TP/SL —á–µ—Ä–µ–∑ trading-stop.
        """
        # sanity
        if qty <= 0 or prev_high <= 0 or prev_low <= 0:
            log.info("[COND][SKIP] bad params")
            return

        # 1) –°—Ç–∞–≤–∏–º –æ–±–∞ —É—Å–ª–æ–≤–Ω—ã—Ö
        r_sell = self._place_conditional("Sell", prev_high, qty, trigger_direction=1)
        r_buy  = self._place_conditional("Buy",  prev_low,  qty, trigger_direction=2)

        oid_sell = r_sell.get("result", {}).get("orderId") if r_sell.get("retCode") == 0 else None
        oid_buy  = r_buy.get("result", {}).get("orderId")  if r_buy.get("retCode") == 0 else None

        if r_sell.get("retCode") != 0:
            log.warning(f"[COND][ERR] sell {r_sell}")
        if r_buy.get("retCode") != 0:
            log.warning(f"[COND][ERR] buy {r_buy}")

        if self.notifier:
            try:
                await self.notifier.notify(f"‚è≥ Cond placed: Sell@{self._fmt(prev_high)} / Buy@{self._fmt(prev_low)} qty={self._fmt(qty)}")
            except Exception:
                pass

        # 2) –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∏—Ü–∏—è (–∑–Ω–∞—á–∏—Ç –æ–¥–Ω–∞ –∏–∑ –∑–∞—è–≤–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
        ok = await self._wait_position_open(timeout=300.0, interval=0.5)
        if not ok:
            log.warning("[COND][TIMEOUT] no fill within 5m ‚Äî cancel both")
            if oid_sell:
                self._cancel_order(order_id=oid_sell)
            if oid_buy:
                self._cancel_order(order_id=oid_buy)
            return

        # 3) –ü–æ–∑–∏—Ü–∏—è –ø–æ—è–≤–∏–ª–∞—Å—å ‚Äî —Å–Ω–∏–º–∞–µ–º –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É (–µ—Å–ª–∏ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞)
        if oid_sell:
            self._cancel_order(order_id=oid_sell)
        if oid_buy:
            self._cancel_order(order_id=oid_buy)

        # 4) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É/—Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º TP/SL
        actual_side = side
        base_price = None
        try:
            pos = self.client.position_list(self.symbol)
            items = pos.get("result", {}).get("list", [])
            if items:
                it = items[0]
                actual_side = it.get("side") or actual_side
                base_price = float(it.get("avgPrice") or it.get("entryPrice") or 0.0)
        except Exception:
            pass

        f = self.ensure_filters()
        tick = f["tickSize"]
        if base_price and base_price > 0:
            sl_adj, tp_adj = self._fix_tpsl(actual_side, base_price, sl_r, tp_r, tick)
        else:
            sl_adj, tp_adj = sl_r, tp_r

        log.info(f"[TPSL][NORM] side={actual_side} base={self._fmt(base_price) if base_price else 'n/a'} sl={self._fmt(sl_adj)} tp={self._fmt(tp_adj)}")

        # 5) –°—Ç–∞–≤–∏–º TP/SL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        r2 = self.client.trading_stop(
            self.symbol,
            side=actual_side,
            stop_loss=sl_adj,
            take_profit=tp_adj,
            tpslMode="Full",
            positionIdx=0,
        )
        if r2.get("retCode") in (0, None):
            log.info(f"[TPSL] sl={self._fmt(sl_adj)} tp={self._fmt(tp_adj)} OK")
            if self.notifier:
                try:
                    await self.notifier.notify(f"üéØ TP/SL set: SL {self._fmt(sl_adj)} / TP {self._fmt(tp_adj)}")
                except Exception:
                    pass
        else:
            log.warning(f"[TPSL][FAIL] {r2}")

    async def open_market(self, side: str, signal: Dict[str, Any]):
        """
        side: "Buy" | "Sell"
        signal: { 'sl': float, 'tp': float, 'atr': float, 'ts_ms': int, ... }
        """
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º —Å–∏–≥–Ω–∞–ª–∞ (dict –∏–ª–∏ dataclass/–æ–±—ä–µ–∫—Ç)
        def _sg(key, default=None):
            if isinstance(signal, dict):
                return signal.get(key, default)
            return getattr(signal, key, default)

        def _sg_multi(keys, default=None):
            for k in keys:
                v = _sg(k, None)
                if v is not None:
                    return v
            return default

        # –æ–±–Ω–æ–≤–∏–º equity/available (–µ—Å–ª–∏ 0) –∏ —Ñ–∏–ª—å—Ç—Ä—ã/–ø–ª–µ—á–æ
        if self.equity <= 0 or self.available <= 0:
            self.refresh_equity()
        self.ensure_filters()
        self.ensure_leverage()

        price = float(_sg_multi(["price", "close"]) or 0.0)
        if price <= 0:
            # –±–µ—Ä—ë–º –±–ª–∏–∑–∫—É—é –æ—Ü–µ–Ω–∫—É ‚Äî –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ REST-–∑–∞–ø—Ä–æ—Å–∞
            price = float(_sg("tp") or 0.0) or 1.0

        sl = float(_sg_multi(["sl", "stop_loss", "stopLoss"]) or 0.0)
        tp = float(_sg_multi(["tp", "take_profit", "takeProfit"]) or 0.0)
        if sl <= 0 or tp <= 0:
            log.info("[ENTER][SKIP] bad SL/TP")
            await self._stop_minute_logger()
            return

        # —Å—Ç–∞—Ä—Ç/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–Ω—É—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏)
        self.set_minute_status("normal", float(sl) if sl else None)

        qty = self._calc_qty(side, price, sl)
        log.info(f"[QTY] risk%={self.risk_pct*100:.2f} stop={abs(price-sl):.2f} equity={self.equity:.2f} avail={self.available:.2f} -> qty={self._fmt(qty)}")
        if qty <= 0:
            log.info("[ENTER][SKIP] qty=0")
            await self._stop_minute_logger()
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–µ SL/TP –∑–∞—Ä–∞–Ω–µ–µ (–¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ order/create)
        f = self.ensure_filters()
        tick = f["tickSize"]
        sl_r = self._ceil_step(sl, tick) if side == "Buy" else self._round_step(sl, tick)
        tp_r = self._round_step(tp, tick) if side == "Buy" else self._ceil_step(tp, tick)
        sl_r, tp_r = self._fix_tpsl(side, price, sl_r, tp_r, tick)

        # --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∂–∏–º–∞ —ç–∫—Å—Ç—Ä–µ–º–æ–≤ ---
        prev_high = _sg_multi(["prev_high", "prevHigh", "prevH", "previous_high", "prev_high_price"])
        prev_low  = _sg_multi(["prev_low", "prevLow", "prevL", "previous_low", "prev_low_price"])
        use_ext = bool(self.entry_extremes and prev_high and prev_low)
        if use_ext:
            log.info(f"[EXT][MODE] ON  prevH={self._fmt(prev_high)} prevL={self._fmt(prev_low)} qty={self._fmt(qty)}")
        else:
            reason = []
            if not self.entry_extremes:
                reason.append("flag_off")
            if not prev_high or not prev_low:
                reason.append("no_prev_hl")
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –¥–µ–±–∞–≥–∞ (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π)
            try:
                fields = list(signal.keys()) if isinstance(signal, dict) else list(vars(signal).keys())
            except Exception:
                fields = ["?"]
            log.info(f"[EXT][MODE] OFF ({','.join(reason) if reason else 'n/a'}) fields={fields}")

        # –æ–±–Ω–æ–≤–∏–º —Ä–µ–∂–∏–º –º–∏–Ω—É—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        log.info("[EXT][CHECKPOINT] minute logger set status")
        try:
            self.set_minute_status("ext" if use_ext else "normal", float(sl) if sl else None)
        except Exception as e:
            log.exception(f"[EXT][LOGGER][EXC] {e}")

        # (3) –í—Å–µ–≥–¥–∞ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º flat –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—Ö–æ–¥–æ–º
        if not use_ext:
            try:
                ps, sz = self._position_side_and_size()
                if ps and sz > 0:
                    log.info(f"[ENTER][FLAT] close existing {ps} size={self._fmt(sz)} before new entry")
                    await self.close_market(self._opposite(ps), sz)
                    for _ in range(20):
                        p2, s2 = self._position_side_and_size()
                        if not p2 or s2 <= 0:
                            break
                        await asyncio.sleep(0.25)
                log.info("[EXT][CHECKPOINT] after flat enforcement")
            except Exception as e:
                log.exception(f"[EXT][FLAT][EXC] {e}")
                log.info("[EXT][CHECKPOINT] after flat enforcement (with exception)")
        else:
            log.info("[ENTER][FLAT] skip in ext mode (only pending limits will be replaced)")

        try:
            log.info(f"[EXT][CHECKPOINT] before branch use_ext={use_ext}")
        except Exception:
            log.exception("[EXT][CHECKPOINT][EXC] before branch")
        if use_ext:
            log.info("[EXT][CHECKPOINT] entering use_ext branch")
            log.info(f"[EXT][LIM][FLOW] side={side} prevH={self._fmt(prev_high)} prevL={self._fmt(prev_low)} qty={self._fmt(qty)}")
            try:
                await self._enter_extremes_with_limits(side, float(prev_high), float(prev_low), qty, sl=float(sl), tp=float(tp))
                log.info("[EXT][RETURN] _enter_extremes_with_limits finished")
            except Exception as e:
                log.exception(f"[EXT][CRASH] _enter_extremes_with_limits exception: {e}")
            finally:
                await self._stop_minute_logger()
            return

        # –ú–∞—Ä–∫–µ—Ç-–≤—Ö–æ–¥: –ë–ï–ó TP/SL, —Å –∂—ë—Å—Ç–∫–∏–º —Ä–µ—Ç—Ä–∞–µ–º 110007 (—É–º–µ–Ω—å—à–∞–µ–º qty –¥–æ –º–∏–Ω–∏–º—É–º–∞)
        log.info(f"[ENTER] {side} qty={self._fmt(qty)}")
        attempt_qty = qty
        order_id = None
        # –º–∞–∫—Å–∏–º—É–º 6 –ø–æ–ø—ã—Ç–æ–∫, —É–º–µ–Ω—å—à–∞—è –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
        for attempt in range(6):
            r = self.client.place_order(
                self.symbol,
                side,
                attempt_qty,
                order_type="Market",
                preferSmart=True,
            )
            rc = r.get("retCode")
            if rc == 0:
                order_id = r.get("result", {}).get("orderId", "")
                log.info(f"[ORDER‚Üê] OK id={order_id}")
                if self.notifier:
                    try:
                        await self.notifier.notify(f"‚úÖ {side} {self.symbol} qty={self._fmt(attempt_qty)} (id {order_id})")
                    except Exception:
                        pass
                break
            if rc == 110007:
                f = self.ensure_filters()
                step = f.get("qtyStep", 0.001)
                min_qty = f.get("minQty", 0.001)
                new_qty = self._round_down_qty(attempt_qty * 0.75)
                if new_qty >= attempt_qty:
                    new_qty = self._round_down_qty(attempt_qty - step)
                if new_qty < min_qty:
                    log.error(f"[ENTER][FAIL] insufficient balance for minimal qty; last={self._fmt(attempt_qty)}")
                    await self._stop_minute_logger()
                    return
                log.info(f"[ENTER][RETRY_QTY] 110007 -> {self._fmt(attempt_qty)} -> {self._fmt(new_qty)}")
                attempt_qty = new_qty
                continue
            if rc == 30208:
                # –ø—Ä–∞–π—Å-–∑–∞—â–∏—Ç–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫—É—é —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
                log.warning("[ENTER][RETRY] 30208: add slippage Percent=0.05")
                r2 = self.client.place_order(
                    self.symbol, side, attempt_qty, order_type="Market",
                    slippageToleranceType="Percent", slippageTolerance="0.05"
                )
                if r2.get("retCode") == 0:
                    order_id = r2.get("result", {}).get("orderId", "")
                    log.info(f"[ORDER‚Üê] OK id={order_id} (slip 0.05%)")
                    if self.notifier:
                        try:
                            await self.notifier.notify(f"‚úÖ {side} {self.symbol} qty={self._fmt(attempt_qty)} (id {order_id}, slip 0.05%)")
                        except Exception:
                            pass
                    break
                # –µ—â—ë –ø–æ–ø—ã—Ç–∫–∞ —Å TickSize=5
                log.warning("[ENTER][RETRY] 30208: add slippage TickSize=5")
                r3 = self.client.place_order(
                    self.symbol, side, attempt_qty, order_type="Market",
                    slippageToleranceType="TickSize", slippageTolerance="5"
                )
                if r3.get("retCode") == 0:
                    order_id = r3.get("result", {}).get("orderId", "")
                    log.info(f"[ORDER‚Üê] OK id={order_id} (slip 5 ticks)")
                    if self.notifier:
                        try:
                            await self.notifier.notify(f"‚úÖ {side} {self.symbol} qty={self._fmt(attempt_qty)} (id {order_id}, slip 5 ticks)")
                        except Exception:
                            pass
                    break
                log.error(f"[ENTER][FAIL] {r3}")
                await self._stop_minute_logger()
                return
            log.error(f"[ENTER][FAIL] {r}")
            await self._stop_minute_logger()
            return

        if not order_id:
            log.error("[ENTER][FAIL] no orderId")
            await self._stop_minute_logger()
            return

        # –î–æ–∂–¥–∞—Ç—å—Å—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∏–ª–∞ –∏–ª–∏ —Ä–µ—Ç—Ä–∞–∏—Ç—å—Å—è
        if not await self._await_fill_or_retry(order_id, side, attempt_qty):
            log.warning("[ENTER][ABORT] no fill")
            await self._stop_minute_logger()
            return

        # ‚Üê NEW: —Å—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º SL –ø–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ —Ä—ã–Ω–∫—É
        if sl:
            try:
                tr = self.client.trading_stop(
                    self.symbol,
                    side=side,
                    stop_loss=float(sl),
                    tpslMode="Full",
                    positionIdx=0,
                )
                if tr.get("retCode") in (0, None):
                    log.info(f"[SL][NORM] set SL={self._fmt(sl)} OK")
                else:
                    log.warning(f"[SL][NORM][FAIL] {tr}")
            except Exception as e:
                log.warning(f"[SL][NORM][EXC] {e}")

        # –û–±–Ω–æ–≤–∏–º qty –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π
        qty = attempt_qty

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º TP/SL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –§–ê–ö–¢–ò–ß–ï–°–ö–û–ô —Å—Ç–æ—Ä–æ–Ω—ã –∏ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
        actual_side = side
        base_price = None
        try:
            pos = self.client.position_list(self.symbol)
            items = pos.get("result", {}).get("list", [])
            if items:
                it = items[0]
                actual_side = it.get("side") or actual_side
                base_price = float(it.get("avgPrice") or it.get("entryPrice") or 0.0)
        except Exception:
            pass

        f = self.ensure_filters()
        tick = f["tickSize"]
        if base_price and base_price > 0:
            sl_adj, tp_adj = self._fix_tpsl(actual_side, base_price, sl_r, tp_r, tick)
        else:
            sl_adj, tp_adj = sl_r, tp_r

        log.info(f"[TPSL][NORM] side={actual_side} base={self._fmt(base_price) if base_price else 'n/a'} sl={self._fmt(sl_adj)} tp={self._fmt(tp_adj)}")

        r2 = self.client.trading_stop(
            self.symbol,
            side=actual_side,
            stop_loss=sl_adj,
            take_profit=tp_adj,
            tpslMode="Full",
            positionIdx=0,
        )
        if r2.get("retCode") in (0, None):
            log.info(f"[TPSL] sl={self._fmt(sl_adj)} tp={self._fmt(tp_adj)} OK")
            if self.notifier:
                try:
                    await self.notifier.notify(f"üéØ TP/SL set: SL {self._fmt(sl_adj)} / TP {self._fmt(tp_adj)}")
                except Exception:
                    pass
        else:
            log.warning(f"[TPSL][FAIL] {r2}")



    async def close_market(self, side: str, qty: float):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–æ–º (–Ω–∞ —Ç–≤–æ–π –≤—ã–±–æ—Ä side / qty).
        """
        if qty <= 0:
            log.info("[EXIT][SKIP] qty=0")
            return
        log.info(f"[EXIT] {side} qty={self._fmt(qty)}")
        r = self.client.place_order(
            self.symbol,
            side,
            qty,
            order_type="Market",
            preferSmart=True,
        )
        if r.get("retCode") == 0:
            oid = r.get("result", {}).get("orderId", "")
            log.info(f"[ORDER‚Üê] CLOSE OK id={oid}")
            if self.notifier:
                try:
                    await self.notifier.notify(f"‚ùå Close {side} {self.symbol} qty={self._fmt(qty)} (id {oid})")
                except Exception:
                    pass
        elif r.get("retCode") == 30208:
            log.warning("[ORDER][RETRY] 30208: close with slippage Percent=0.05")
            r = self.client.place_order(
                self.symbol,
                side,
                qty,
                order_type="Market",
                slippageToleranceType="Percent",
                slippageTolerance="0.05",
            )
            if r.get("retCode") == 0:
                oid = r.get("result", {}).get("orderId", "")
                log.info(f"[ORDER‚Üê] CLOSE OK id={oid} (slip 0.05%)")
                if self.notifier:
                    try:
                        await self.notifier.notify(f"‚ùå Close {side} {self.symbol} qty={self._fmt(qty)} (id {oid}, slip 0.05%)")
                    except Exception:
                        pass
            else:
                log.error(f"[ORDER][FAIL] {r}")
        else:
            log.error(f"[ORDER][FAIL] {r}")
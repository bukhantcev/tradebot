import os
import asyncio

from bybit_client import market_close_all, bybit_open_orders, read_market, retry_place, bybit_place_order, \
    ensure_order_filled_or_cancel, bybit_best_prices, ensure_sl_tp, _kline_to_df, _body_edges, bybit_cancel_all, \
    clamp_sl_for_exchange, clamp_tp_min_distance
from clients import \
    SL_TICKS, TREND_SL_MULT, LOT_SIZE_USDT, MARKET_BAND_EXTRA_TICKS, FLAT_ENTRY_TICKS, TP_BODY_OFFSET_TICKS, \
    MIN_TP_TICKS, TREND_CONFIRM_BARS, REVERSE_HYSTERESIS_SEC, FLAT_CHANNEL_BARS, SL_FLAT_CHANNEL_PCT
from helpers import normalize_qty, tg_send, normalize_price
from models import MarketData, AIDecision, STATE, Side, Regime
from logger import log
# ---- Optional SSL relax (env BYBIT_VERIFY_SSL=false) ----
if os.getenv("BYBIT_VERIFY_SSL", "true").lower() == "false":
    os.environ["PYTHONHTTPSVERIFY"] = "0"

from dotenv import load_dotenv

load_dotenv()


# ------------------ Regime executors ------------------
async def do_trend(md: MarketData, dec: AIDecision):
    """
    TREND:
    - –í—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é dec.side.
      1) –°–Ω–∞—á–∞–ª–∞ Market IOC.
      2) –ï—Å–ª–∏ –ø—Ä–∞–π—Å-–±—ç–Ω–¥ (30208/30209) –ò–õ–ò Market –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è ‚Üí –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ Limit IOC (fallback).
         –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∂–¥—ë–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–ª–∞ —á–µ—Ä–µ–∑ ensure_order_filled_or_cancel.
    - –¢—Ä–µ–π–ª–∏–Ω–≥ SL:
      ‚Ä¢ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —è–∫–æ—Ä—å = avg_price –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ,
      ‚Ä¢ –¥–∞–ª—å—à–µ —è–∫–æ—Ä—å ‚Äî —ç–∫—Å—Ç—Ä–µ–º—É–º —Ü–µ–Ω—ã –≤ –ø–æ–ª—å–∑—É –ø–æ–∑–∏—Ü–∏–∏,
      ‚Ä¢ SL = anchor ¬± (sl_ticks * TREND_SL_MULT) * tick,
      ‚Ä¢ —É–∂–µ—Å—Ç–æ—á–∞–µ–º —Ç–æ–ª—å–∫–æ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–æ–¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ –æ—Ç —Ü–µ–Ω—ã).
    """
    symbol = STATE.symbol
    f = md.filters
    desired = dec.side
    if desired not in (Side.BUY, Side.SELL):
        return

    # –ø–∞—É–∑–∞ –Ω–∞ —Ä–µ-–≤—Ö–æ–¥ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è/—Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è SL
    if asyncio.get_event_loop().time() < STATE.reenter_block_until:
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, –Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º (–ø–µ—Ä–µ–≤—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ)
    if md.position.size > 0 and md.position.side != desired:
        await market_close_all(symbol)
        STATE.reenter_block_until = asyncio.get_event_loop().time() + 1
        log.info("[COOLDOWN] –±–ª–æ–∫ –≤—Ö–æ–¥–∞ –¥–æ %.1f (now=%.1f) –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ TREND",
                 STATE.reenter_block_until, asyncio.get_event_loop().time())
        return

    # ===== –í–•–û–î =====
    if md.position.size == 0:
        # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤? ‚Äî –≤—Ö–æ–¥–∏–º
        if not bybit_open_orders(symbol):
            md2 = read_market(symbol, 1)
            qty = normalize_qty(LOT_SIZE_USDT / max(md2.last_price, 1e-8), f.qty_step, f.min_qty)

            # 1) Market IOC
            try:
                r = await retry_place(lambda: bybit_place_order(
                    symbol=symbol, side=desired, order_type="Market", qty=qty, time_in_force="IOC"
                ), descr=f"trend_enter_{desired.value}")
                await tg_send(f"üìà TREND {desired.value} qty={qty} (Market IOC)")
                # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (—Ä—ã–Ω–æ—á–Ω—ã–π –º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è –∏–∑-–∑–∞ –±—ç–Ω–¥–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ)
                if not await ensure_order_filled_or_cancel(symbol, r["result"]["orderId"], timeout_sec=10):
                    # Market –Ω–µ –¥–∞–ª –ø–æ–∑–∏—Ü–∏—é ‚Üí –∏–¥—ë–º –≤ fallback IOC-Limit
                    bid, ask = bybit_best_prices(symbol)
                    base_px = (ask if desired == Side.BUY else bid) or md2.last_price
                    base_px = normalize_price(base_px, f.tick_size)

                    placed = False
                    for i in range(1, 4):
                        px_try = (base_px + i * MARKET_BAND_EXTRA_TICKS * f.tick_size) if desired == Side.BUY \
                                 else (base_px - i * MARKET_BAND_EXTRA_TICKS * f.tick_size)
                        px_try = normalize_price(px_try, f.tick_size)
                        try:
                            r2 = await retry_place(lambda: bybit_place_order(
                                symbol=symbol, side=desired, order_type="Limit", qty=qty,
                                price=px_try, time_in_force="IOC"
                            ), descr=f"trend_enter_limit_{desired.value}")
                            if await ensure_order_filled_or_cancel(symbol, r2["result"]["orderId"], timeout_sec=10):
                                await tg_send(f"üìà TREND {desired.value} qty={qty} (IOC Limit @ {px_try})")
                                placed = True
                                break
                        except Exception as ee:
                            log.warning("[TREND] IOC-Limit –ø–æ–ø—ã—Ç–∫–∞ %d –Ω–µ —É–¥–∞–ª–∞—Å—å: %s", i, ee)
                            continue

                    if not placed:
                        log.error("[TREND] Market –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è –∏ fallback IOC-Limit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                return
            except Exception as e:
                msg = str(e).lower()
                # 2) –ü—Ä–∞–π—Å-–±—ç–Ω–¥ ‚Üí —Å—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º Limit IOC
                if ("maximum buying price" in msg) or ("maximum selling price" in msg) or ("30208" in msg) or ("30209" in msg):
                    bid, ask = bybit_best_prices(symbol)
                    base_px = (ask if desired == Side.BUY else bid) or md2.last_price
                    base_px = normalize_price(base_px, f.tick_size)

                    placed = False
                    for i in range(1, 4):
                        px_try = (base_px + i * MARKET_BAND_EXTRA_TICKS * f.tick_size) if desired == Side.BUY \
                                 else (base_px - i * MARKET_BAND_EXTRA_TICKS * f.tick_size)
                        px_try = normalize_price(px_try, f.tick_size)
                        try:
                            r2 = await retry_place(lambda: bybit_place_order(
                                symbol=symbol, side=desired, order_type="Limit", qty=qty,
                                price=px_try, time_in_force="IOC"
                            ), descr=f"trend_enter_limit_{desired.value}")
                            if await ensure_order_filled_or_cancel(symbol, r2["result"]["orderId"], timeout_sec=10):
                                await tg_send(f"üìà TREND {desired.value} qty={qty} (IOC Limit @ {px_try})")
                                placed = True
                                break
                        except Exception as ee:
                            log.warning("[TREND] IOC-Limit –ø–æ–ø—ã—Ç–∫–∞ %d –Ω–µ —É–¥–∞–ª–∞—Å—å: %s", i, ee)
                            continue

                    if not placed:
                        log.error("[TREND] fallback IOC-Limit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –≤—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    return
                else:
                    # –∫–∞–∫–∞—è-—Ç–æ –∏–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—à–µ
                    raise

        # –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∂–¥—ë–º
        return

    # ===== –¢–†–ï–ô–õ–ò–ù–ì SL =====
    # —á–∏—Å–ª–æ —Ç–∏–∫–æ–≤ SL (override –æ—Ç –ò–ò/–ª–æ–∫–∞–ª–∫–∏ + –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç—Ä–µ–Ω–¥–∞) —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∏–≤—ã—Ö —Ç–∏–ø–æ–≤
    try:
        base_ticks = dec.sl_ticks if dec.sl_ticks is not None else SL_TICKS
        base_ticks = int(base_ticks)
    except Exception:
        base_ticks = int(SL_TICKS)
    sl_ticks = int(base_ticks * TREND_SL_MULT)

    fresh = read_market(symbol, 1)
    if fresh.position.size <= 0:
        return

    lp = fresh.last_price

    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —è–∫–æ—Ä—å ‚Äî —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ (—á—Ç–æ–±—ã SL –Ω–µ –±—ã–ª ¬´–≤–ø—Ä–∏—Ç—ã–∫¬ª —Å –æ—Ç–∫—Ä—ã—Ç–∏—è)
    if STATE.trail_anchor is None:
        STATE.trail_anchor = fresh.position.avg_price

    if fresh.position.side == Side.BUY:
        # –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º-—è–∫–æ—Ä—å —Ç–æ–ª—å–∫–æ –≤–≤–µ—Ä—Ö
        if lp > STATE.trail_anchor:
            STATE.trail_anchor = lp
        desired_sl = normalize_price(STATE.trail_anchor - sl_ticks * f.tick_size, f.tick_size)
        # —É–∂–µ—Å—Ç–æ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π SL –±–ª–∏–∂–µ –∫ —Ü–µ–Ω–µ, —á–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        if STATE.last_sl_price is None or desired_sl > STATE.last_sl_price:
            await ensure_sl_tp(symbol, sl_price=desired_sl, tp_price=None)
            STATE.last_sl_price = desired_sl
            log.info("[TREND] TRAIL BUY sl‚Üí %.6f (anchor=%.6f, ticks=%d)", desired_sl, STATE.trail_anchor, sl_ticks)

    else:  # SELL
        # –æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º-—è–∫–æ—Ä—å —Ç–æ–ª—å–∫–æ –≤–Ω–∏–∑
        if lp < STATE.trail_anchor:
            STATE.trail_anchor = lp
        desired_sl = normalize_price(STATE.trail_anchor + sl_ticks * f.tick_size, f.tick_size)
        if STATE.last_sl_price is None or desired_sl < STATE.last_sl_price:
            await ensure_sl_tp(symbol, sl_price=desired_sl, tp_price=None)
            STATE.last_sl_price = desired_sl
            log.info("[TREND] TRAIL SELL sl‚Üí %.6f (anchor=%.6f, ticks=%d)", desired_sl, STATE.trail_anchor, sl_ticks)


async def do_flat(md: MarketData, dec: AIDecision):
    """
    FLAT:
    - –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç: –Ω–∞ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∑–∞–∫—Ä—ã—Ç–æ–π –º–∏–Ω—É—Ç–µ –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ª–∏–º–∏—Ç–∫—É –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é
      –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–∞–ª–∞, –Ω–æ —á—É—Ç—å –≤–Ω—É—Ç—Ä–∏ (¬± FLAT_ENTRY_TICKS * tick –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã).
    - –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å: TP ‚Äî —Ä–æ–≤–Ω–æ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞, SL ‚Äî –Ω–∞ X% (SL_FLAT_CHANNEL_PCT)
      –∑–∞ –≤–Ω–µ—à–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π –∫–∞–Ω–∞–ª–∞, –ø–ª—é—Å –±–∏—Ä–∂–µ–≤—ã–µ –∫–ª–∞–º–ø—ã/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è.
    - –°–º–µ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ ‚Üí –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫—É–ª–¥–∞—É–Ω.
    """
    symbol = STATE.symbol
    f = md.filters
    desired = dec.side
    if desired not in (Side.BUY, Side.SELL):
        return

    if asyncio.get_event_loop().time() < STATE.reenter_block_until:
        return

    df = _kline_to_df(md.kline_1m)
    prev = df.iloc[-2]
    prev_ts = int(prev["ts"])
    prev_high = float(prev["high"])
    prev_low = float(prev["low"])
    body_low, body_high = _body_edges(prev)

    # === –ö–∞–Ω–∞–ª —Ñ–ª—ç—Ç–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–∫—Ä—ã—Ç—ã–º –±–∞—Ä–∞–º ===
    win = max(2, int(FLAT_CHANNEL_BARS))
    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ó–ê–ö–†–´–¢–´–ï –±–∞—Ä—ã: [-win-1 : -1] (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π—Å—è)
    window_df = df.iloc[-(win + 1):-1] if len(df) >= win + 1 else df.iloc[:-1]
    chan_high = float(window_df["high"].max()) if not window_df.empty else prev_high
    chan_low = float(window_df["low"].min()) if not window_df.empty else prev_low

    # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è ‚Üí –∑–∞–∫—Ä—ã—Ç—å
    if md.position.size > 0 and md.position.side != desired:
        await market_close_all(symbol)
        try:
            bybit_cancel_all(symbol)
        except Exception:
            pass
        STATE.reenter_block_until = asyncio.get_event_loop().time() + 1
        log.info("[COOLDOWN] –±–ª–æ–∫ –≤—Ö–æ–¥–∞ –¥–æ %.1f (now=%.1f) –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å—Ç–æ—Ä–æ–Ω—ã FLAT",
                 STATE.reenter_block_until, asyncio.get_event_loop().time())
        return

    open_orders = bybit_open_orders(symbol)
    need_requote = (STATE.last_flat_prev_ts is None) or (prev_ts != STATE.last_flat_prev_ts)

    # –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç ‚Üí –ª–∏–º–∏—Ç–∫–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–∞–ª–∞, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–∏
    if md.position.size == 0:
        if need_requote and open_orders:
            try:
                bybit_cancel_all(symbol)
                await tg_send("‚ôªÔ∏è FLAT —Ä–µ-–∫–æ—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç–º–µ–Ω–∏–ª —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É")
            except Exception:
                pass
            open_orders = []

        if not open_orders:
            ts = f.tick_size if f.tick_size > 0 else 0.1
            if desired == Side.BUY:
                # –≤—Ö–æ–¥ –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –≤–Ω—É—Ç—Ä—å –∫–∞–Ω–∞–ª–∞
                entry_price = normalize_price(chan_low + FLAT_ENTRY_TICKS * ts, ts)
            else:
                # –≤—Ö–æ–¥ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –≤–Ω—É—Ç—Ä—å –∫–∞–Ω–∞–ª–∞
                entry_price = normalize_price(chan_high - FLAT_ENTRY_TICKS * ts, ts)
            qty = normalize_qty(LOT_SIZE_USDT / max(entry_price, 1e-8), f.qty_step, f.min_qty)
            await retry_place(lambda: bybit_place_order(
                symbol=symbol, side=desired, order_type="Limit", qty=qty,
                price=entry_price, time_in_force="GTC"
            ), descr=f"flat_limit_enter_{desired.value}@{entry_price}")
            await tg_send(f"ü§è FLAT –∑–∞—è–≤–∫–∞ {desired.value} {qty} @ {entry_price}")
        STATE.last_flat_prev_ts = prev_ts
        return

    # –ü–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å ‚Üí SL/TP (TP –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞, SL –∑–∞ –∫–∞–Ω–∞–ª–æ–º –Ω–∞ %)
    fresh = read_market(symbol, 1)
    ts = f.tick_size if f.tick_size > 0 else 0.1
    pct = max(0.0, float(SL_FLAT_CHANNEL_PCT)) / 100.0

    avg = fresh.position.avg_price
    last = fresh.last_price

    if desired == Side.BUY:
        # TP ‚Äî —Ä–æ–≤–Ω–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞, SL ‚Äî –Ω–∞ % –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (–≤–Ω–µ –∫–∞–Ω–∞–ª–∞)
        tp_raw = chan_high
        sl_raw = chan_low * (1.0 - pct)
        # –ë–∏—Ä–∂–µ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: SL –¥–ª—è BUY –Ω–∏–∂–µ –±–∞–∑—ã –º–∏–Ω–∏–º—É–º –Ω–∞ 1 —Ç–∏–∫
        sl_raw = min(sl_raw, min(avg, last) - ts)
    else:  # SELL
        # TP ‚Äî —Ä–æ–≤–Ω–æ –Ω–∞ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞, SL ‚Äî –Ω–∞ % –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (–≤–Ω–µ –∫–∞–Ω–∞–ª–∞)
        tp_raw = chan_low
        sl_raw = chan_high * (1.0 + pct)
        # –ë–∏—Ä–∂–µ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: SL –¥–ª—è SELL –≤—ã—à–µ –±–∞–∑—ã –º–∏–Ω–∏–º—É–º –Ω–∞ 1 —Ç–∏–∫
        sl_raw = max(sl_raw, max(avg, last) + ts)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/–∫–ª–∞–º–ø—ã
    sl_price = normalize_price(sl_raw, ts)
    tp_price = normalize_price(tp_raw, ts)

    sl_price = clamp_sl_for_exchange(desired, avg, last, sl_price, ts)

    # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: TP –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞
    tp_price = max(min(tp_price, chan_high), chan_low)

    await ensure_sl_tp(symbol, sl_price=sl_price, tp_price=tp_price)
    STATE.last_sl_price = sl_price
    await tg_send(f"üõ° SL={sl_price} üéØ TP={tp_price}")
    STATE.last_flat_prev_ts = prev_ts


async def do_hold(md: MarketData, dec: AIDecision):
    # –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏; —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
    log.info("[HOLD] No trades")


# ======== –¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞ ========

def _ensure_trend_state_fields():
    # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not hasattr(STATE, "_trend_queue"):
        from collections import deque
        STATE._trend_queue = deque(maxlen=TREND_CONFIRM_BARS)
    if not hasattr(STATE, "last_flip_at"):
        STATE.last_flip_at = 0.0


async def _flip_to_trend(symbol: str, side: Side, now_mono: float):
    """–ñ—ë—Å—Ç–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–¥ side —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å—Ç—Ä–µ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º."""
    await tg_send("üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¢–†–ï–ù–î: –∑–∞–∫—Ä—ã–≤–∞—é –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —Å–Ω–∏–º–∞—é –∑–∞—è–≤–∫–∏")
    try:
        bybit_cancel_all(symbol)
    except Exception:
        pass
    await market_close_all(symbol)
    STATE.reenter_block_until = now_mono + REVERSE_HYSTERESIS_SEC
    STATE.current_regime = Regime.TREND
    STATE.current_side = side
    STATE.last_flip_at = now_mono
    await tg_send(
        "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
        f"–†–µ–∂–∏–º: <b>{STATE.current_regime.value}</b>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{STATE.current_side.value}</b>"
    )


async def apply_trend_confirmation(dec_new: AIDecision, md: MarketData, now_mono: float) -> bool:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞:
    - –ö–æ–ø–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TREND_CONFIRM_BARS —Ä–µ—à–µ–Ω–∏–π TREND –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ (Buy/Sell);
    - –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï –ø–æ–¥—Ä—è–¥ —Å–æ–≤–ø–∞–ª–∏ –∏ —ç—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ—Ä–æ–Ω—ã;
    - –ü–æ—Å–ª–µ flip —Å—Ç–∞–≤–∏–º –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å REVERSE_HYSTERESIS_SEC (STATE.reenter_block_until).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    _ensure_trend_state_fields()

    # –ù–µ TREND ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –∏ –≤—ã—Ö–æ–¥–∏–º
    if dec_new.regime != Regime.TREND or dec_new.side not in (Side.BUY, Side.SELL):
        STATE._trend_queue.clear()
        return False

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª
    STATE._trend_queue.append(dec_new.side)

    # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –µ—â—ë –Ω–µ –Ω–∞–±—Ä–∞–Ω ‚Äî —Ä–∞–Ω–æ
    if len(STATE._trend_queue) < TREND_CONFIRM_BARS:
        return False

    # –ï—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ —Å—Ç–æ—Ä–æ–Ω—ã?
    all_same = all(s == STATE._trend_queue[0] for s in STATE._trend_queue)
    confirmed_side = STATE._trend_queue[0] if all_same else None
    if not confirmed_side:
        return False

    # –£–∂–µ –≤ –Ω—É–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Ç—Ä–µ–Ω–¥–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
    if STATE.current_regime == Regime.TREND and STATE.current_side == confirmed_side:
        return False

    # –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å: –Ω–µ –¥—ë—Ä–≥–∞–µ–º—Å—è, –µ—Å–ª–∏ –µ—â—ë –∏–¥—ë—Ç –±–ª–æ–∫ –ø–µ—Ä–µ-–≤—Ö–æ–¥–∞
    if now_mono < getattr(STATE, "reenter_block_until", 0.0):
        return False

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—å
    if md.position.size > 0 and md.position.side != confirmed_side:
        await _flip_to_trend(STATE.symbol, confirmed_side, now_mono)
        return True

    # –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ, –Ω–æ —Ä–µ–∂–∏–º –¥—Ä—É–≥–æ–π ‚Üí –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º/—Å—Ç–æ—Ä–æ–Ω—É
    await _flip_to_trend(STATE.symbol, confirmed_side, now_mono)
    return True
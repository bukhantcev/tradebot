# main.py
import os
import asyncio

import logging
from dataclasses import dataclass

from datetime import datetime, timezone

from typing import Optional, Any, List

from bybit_client import bybit_set_leverage, read_market, _kline_to_df, bybit_cancel_entry_orders, bybit_cancel_all, \
    market_close_all, hold_guard_sl, enforce_sl_must_have, sweep_after_sl, bybit_wallet_usdt
from clients import BOT, RETRY_ATTEMPTS, RETRY_DELAY_SEC, \
    SL_TICKS, TREND_SL_MULT, \
    LEVERAGE, BOOTSTRAP_HOURS, REENTER_AFTER_SL_SEC, \
    POLL_TICK_MS, AI_POLL_SEC, DP, USE_LOCAL_DECIDER
from helpers import tg_send
from logger import log
from reshalka import get_decision
from trader import apply_trend_confirmation, do_trend, do_flat, do_hold
from models import STATE, Regime, AIDecision, Side

# ---- Optional SSL relax (env BYBIT_VERIFY_SSL=false) ----
if os.getenv("BYBIT_VERIFY_SSL", "true").lower() == "false":
    os.environ["PYTHONHTTPSVERIFY"] = "0"

from dotenv import load_dotenv

from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode

# ------------------ .env & logging ------------------
load_dotenv()




# ------------------ Trading primitives with retries ------------------
RETRY_ATTEMPTS = int(os.getenv("RETRY_ATTEMPTS", str(RETRY_ATTEMPTS)))
RETRY_DELAY_SEC = int(os.getenv("RETRY_DELAY_SEC", str(RETRY_DELAY_SEC)))



# ------------------ Main trading loop ------------------
async def trading_loop():
    symbol = STATE.symbol
    STATE.prev_regime_was_trend = False
    await tg_send("üöÄ –°—Ç–∞—Ä—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏")

    # leverage
    try:
        bybit_set_leverage(symbol, LEVERAGE)
        log.info("[LEV] set leverage=%dx", LEVERAGE)
    except Exception as e:
        log.warning("[LEV] fail set leverage: %s", e)

    # initial bootstrap (5 hours history) with fallback
    try:
        md = read_market(symbol, BOOTSTRAP_HOURS)
        df = _kline_to_df(md.kline_1m)
        await tg_send("üì• –ü–æ–¥–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 5 —á–∞—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        log.exception("[BOOTSTRAP] failed 5h load: %s", e)
        await tg_send("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ 5 —á–∞—Å–æ–≤. –ü—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å 60 –º–∏–Ω—É—Ç‚Ä¶")
        md = read_market(symbol, 1)
        df = _kline_to_df(md.kline_1m)
        await tg_send("üì• –ü–æ–¥–≥—Ä—É–∂–µ–Ω–æ –∑–∞ 60 –º–∏–Ω—É—Ç (fallback)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π 1m —Å–≤–µ—á–∏
    if len(df) >= 2:
        STATE.last_ai_prev_ts = int(df.iloc[-2]["ts"])

    # –ü–µ—Ä–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –ø–æ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–µ
    dec = await get_decision(symbol, df, md)
    STATE.current_regime = dec.regime
    STATE.current_side = dec.side
    STATE.last_decision_sl_ticks = dec.sl_ticks
    await tg_send(f"üß≠ –†–µ–∂–∏–º: <b>{dec.regime.value}</b> | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{dec.side.value}</b>")

    last_ai_time = 0.0
    while STATE.is_trading:
        try:
            now_mono = asyncio.get_event_loop().time()

            # –ß–∏—Ç–∞–µ–º —Ä—ã–Ω–æ–∫
            history_hours = 4 if USE_LOCAL_DECIDER else 1
            md = read_market(symbol, history_hours)
            df = _kline_to_df(md.kline_1m)

            # ---------- –†–ê–ù–ù–ò–ô –ö–£–õ–î–ê–£–ù –ü–û–°–õ–ï –í–´–•–û–î–ê –í –ù–û–õ–¨ ----------
            # –ï—Å–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª–æ–º —à–∞–≥–µ –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ >0, –∞ —Å–µ–π—á–∞—Å 0 ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±—ã–ª –ø–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ (–≤ —Ç.—á. SL).
            if STATE.last_pos_size > 0 and md.position.size == 0:
                STATE.trail_anchor = None
                STATE.last_sl_hit_at = datetime.now(timezone.utc)
                STATE.reenter_block_until = now_mono + REENTER_AFTER_SL_SEC
                log.info("[COOLDOWN] (EARLY) –±–ª–æ–∫ –≤—Ö–æ–¥–∞ –¥–æ %.1f (now=%.1f) –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –≤ 0",
                         STATE.reenter_block_until, now_mono)
                # –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Å–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ –ª–∏–º–∏—Ç–∫–∏ (SL/TP —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏)
                try:
                    bybit_cancel_entry_orders(symbol)
                    log.info("[CANCEL-ENTRY] cancelled entry orders after exit")
                except Exception:
                    pass
                # –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∏ —É—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫, —á—Ç–æ–±—ã –≤ —ç—Ç–æ–º –Ω–µ –±—ã–ª–æ –≤—Ö–æ–¥–æ–≤
                STATE.last_pos_size = md.position.size
                await asyncio.sleep(POLL_TICK_MS / 1000.0)
                continue
            # --------------------------------------------------------

            # --- –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç–∫–∏ (+ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞) ---
            if len(df) >= 2:
                prev_ts_now = int(df.iloc[-2]["ts"])
            else:
                prev_ts_now = None

            need_decision = False
            if prev_ts_now is not None and prev_ts_now != STATE.last_ai_prev_ts:
                need_decision = True
                STATE.last_ai_prev_ts = prev_ts_now
            elif (now_mono - last_ai_time) >= AI_POLL_SEC * 3:
                # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ ¬´–∑–∞–ª–∏–ø¬ª –∏ —Å–≤–µ—á–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–æ–ª–≥–æ
                need_decision = True

            if need_decision:
                dec_new = await get_decision(symbol, df, md)
                STATE.last_decision_sl_ticks = dec_new.sl_ticks
                regime_changed = dec_new.regime != STATE.current_regime
                side_changed = (dec_new.side != STATE.current_side) and dec_new.regime != Regime.HOLD

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
                if dec_new.regime == Regime.TREND:
                    flipped = await apply_trend_confirmation(dec_new, md, now_mono)
                    if flipped:
                        last_ai_time = now_mono
                        # –ø–æ—Å–ª–µ flip —Å—Ä–∞–∑—É –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ (–ø—É—Å–∫–∞–π –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å/–∫—É–ª–¥–∞—É–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞—é—Ç)
                        await asyncio.sleep(POLL_TICK_MS / 1000.0)
                        continue

                # –°–ø–µ—Ü-–ª–æ–≥–∏–∫–∞ –¥–ª—è FLAT
                if STATE.current_regime == Regime.FLAT and dec_new.regime == Regime.FLAT:
                    pos_now = md.position
                    if pos_now.size > 0:
                        if dec_new.side == pos_now.side:
                            STATE.current_side = dec_new.side
                            STATE.current_regime = Regime.FLAT
                            last_ai_time = now_mono
                        else:
                            await tg_send("üîÅ FLAT: —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ ‚Üí –∑–∞–∫—Ä—ã–≤–∞—é –ø–æ —Ä—ã–Ω–∫—É")
                            # –†–ê–ù–ï–ï —Å—Ç–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫—É–ª–¥–∞—É–Ω, —á—Ç–æ–±—ã –≤ —ç—Ç–æ—Ç –∂–µ —Ç–∏–∫ –Ω–µ –≤–æ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ
                            STATE.reenter_block_until = now_mono + 3
                            try:
                                bybit_cancel_all(symbol)
                            except Exception:
                                pass
                            await market_close_all(symbol)
                            log.info("[COOLDOWN] –±–ª–æ–∫ –≤—Ö–æ–¥–∞ –¥–æ %.1f (now=%.1f) –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å—Ç–æ—Ä–æ–Ω—ã FLAT",
                                     STATE.reenter_block_until, now_mono)
                            STATE.current_regime = Regime.FLAT
                            STATE.current_side = dec_new.side
                            last_ai_time = now_mono
                            await tg_send(
                                "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
                                f"–†–µ–∂–∏–º: <b>{dec_new.regime.value}</b>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{dec_new.side.value}</b>"
                                + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {dec_new.comment}" if dec_new.comment else "")
                            )
                    else:
                        if side_changed:
                            try:
                                bybit_cancel_all(symbol)
                            except Exception:
                                pass
                            STATE.current_side = dec_new.side
                            STATE.current_regime = Regime.FLAT
                            last_ai_time = now_mono
                            await tg_send(
                                "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
                                f"–†–µ–∂–∏–º: <b>{dec_new.regime.value}</b>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{dec_new.side.value}</b>"
                                + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {dec_new.comment}" if dec_new.comment else "")
                            )
                else:
                    if regime_changed or side_changed:
                        if dec_new.regime == Regime.HOLD:
                            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ HOLD: –ø–æ–∑–∏—Ü–∏–∏ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º, —Å–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ –ª–∏–º–∏—Ç–∫–∏
                            await tg_send("‚è∏ –ü–µ—Ä–µ—Ö–æ–¥ –≤ HOLD ‚Üí –ø–æ–∑–∏—Ü–∏—é –æ—Å—Ç–∞–≤–ª—è—é, —Å–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ –ª–∏–º–∏—Ç-–∑–∞—è–≤–∫–∏")
                            try:
                                bybit_cancel_entry_orders(symbol)
                            except Exception:
                                pass
                            STATE.prev_regime_was_trend = (STATE.current_regime == Regime.TREND)
                            STATE.current_regime = Regime.HOLD
                            await tg_send(
                                "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
                                f"–†–µ–∂–∏–º: <b>{dec_new.regime.value}</b>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{STATE.current_side.value}</b>"
                                + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {dec_new.comment}" if dec_new.comment else "")
                            )
                        elif dec_new.regime == Regime.FLAT:
                            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ FLAT: –í–°–ï–ì–î–ê –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ–º –í–°–ï –∑–∞—è–≤–∫–∏
                            await tg_send("‚ÜîÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ FLAT ‚Üí —Å–Ω–∏–º–∞—é –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏–∏")
                            # —Å—Ç–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫—É–ª–¥–∞—É–Ω –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –≤—Ö–æ–¥ –Ω–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤ —ç—Ç–æ—Ç –∂–µ —Ç–∏–∫
                            STATE.reenter_block_until = now_mono + 3
                            try:
                                bybit_cancel_all(symbol)
                            except Exception:
                                pass
                            await market_close_all(symbol)
                            log.info("[COOLDOWN] –±–ª–æ–∫ –≤—Ö–æ–¥–∞ –¥–æ %.1f (now=%.1f) –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤–æ FLAT",
                                     STATE.reenter_block_until, now_mono)
                            STATE.current_regime = Regime.FLAT
                            STATE.current_side = dec_new.side
                            STATE.last_flat_prev_ts = None  # –ø—Ä–∏–Ω—É–¥–∏–º —Å–≤–µ–∂—É—é –ø–µ—Ä–µ–∫–æ—Ç–∏—Ä–æ–≤–∫—É –ª–∏–º–∏—Ç–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç–µ
                            await tg_send(
                                "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
                                f"–†–µ–∂–∏–º: <b>{dec_new.regime.value}</b>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{dec_new.side.value}</b>"
                                + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {dec_new.comment}" if dec_new.comment else "")
                            )
                        else:
                            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ TREND –∏–ª–∏ —Å–º–µ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ã –≤–Ω–µ HOLD/FLAT-—Å–ø–µ—Ü–∫–µ–π—Å–∞
                            await tg_send("üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üí –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏–∏")
                            # –†–ê–ù–ï–ï —Å—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                            STATE.reenter_block_until = now_mono + 3
                            try:
                                bybit_cancel_all(symbol)
                            except Exception:
                                pass
                            await market_close_all(symbol)
                            log.info("[COOLDOWN] –±–ª–æ–∫ –≤—Ö–æ–¥–∞ –¥–æ %.1f (now=%.1f) –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞",
                                     STATE.reenter_block_until, now_mono)
                            STATE.current_regime = dec_new.regime
                            STATE.current_side = dec_new.side
                            await tg_send(
                                "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
                                f"–†–µ–∂–∏–º: <b>{dec_new.regime.value}</b>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{dec_new.side.value}</b>"
                                + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {dec_new.comment}" if dec_new.comment else "")
                            )
                    last_ai_time = now_mono

            # –ï—Å–ª–∏ –∏–¥—ë—Ç –∫—É–ª–¥–∞—É–Ω ‚Äî –≤–æ–æ–±—â–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
            if now_mono < getattr(STATE, "reenter_block_until", 0.0):
                await asyncio.sleep(POLL_TICK_MS / 1000.0)
                # –æ–±–Ω–æ–≤–∏–º –º–∞—Ä–∫–µ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
                STATE.last_pos_size = md.position.size
                continue

            # --- –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–∂–∏–º—É ---
            if STATE.current_regime == Regime.TREND:
                await do_trend(md, AIDecision(STATE.current_regime, STATE.current_side))
            elif STATE.current_regime == Regime.FLAT:
                await do_flat(md, AIDecision(STATE.current_regime, STATE.current_side))
            else:
                await do_hold(md, AIDecision(STATE.current_regime, STATE.current_side))
                await hold_guard_sl(symbol, md)  # –≤ HOLD —Å–ª–µ–¥–∏–º, —á—Ç–æ SL –∂–∏–≤–æ–π

            # --- –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å (0 ‚Üí >0), 10—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É SL ---
            if STATE.last_pos_size <= 0 and md.position.size > 0:
                try:
                    base_ticks = STATE.last_decision_sl_ticks if STATE.last_decision_sl_ticks is not None else SL_TICKS
                    try:
                        base_ticks = int(base_ticks)
                    except Exception:
                        base_ticks = int(SL_TICKS)
                    sl_ticks_enforce = int(base_ticks * (TREND_SL_MULT if STATE.current_regime == Regime.TREND else 1))
                    STATE.trail_anchor = md.position.avg_price
                    await enforce_sl_must_have(
                        symbol,
                        md.position.side,
                        md.filters,
                        sl_ticks=sl_ticks_enforce,
                        timeout_sec=10,
                    )
                except Exception as e:
                    log.exception("[ENFORCE-SL] –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)

            # --- –î–æ–±–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ SL, –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤–∏—Å–∏—Ç ---
            await sweep_after_sl(symbol, md, md.filters)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è —Ä–∞–Ω–Ω–µ–π –≤–µ—Ç–∫–∏ –≤—ã—à–µ)
            STATE.last_pos_size = md.position.size

            await asyncio.sleep(POLL_TICK_MS / 1000.0)
        except Exception as e:
            log.exception("[LOOP] error: %s", e)
            await asyncio.sleep(1)

    await tg_send("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
# ------------------ Telegram UI ------------------
def kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"), KeyboardButton(text="‚èπÔ∏è –°—Ç–æ–ø")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üö´ –ó–∞–∫—Ä—ã—Ç—å –≤—Å—ë")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
        selective=False,
    )

@DP.message(F.text.regexp(r"^/start$"))
async def start_cmd(msg: Message):
    await msg.answer(
        "–ë–æ—Ç –≥–æ—Ç–æ–≤. –ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É.\n\n"
        "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "‚èπÔ∏è –°—Ç–æ–ø ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –≤—Å—ë\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üö´ –ó–∞–∫—Ä—ã—Ç—å –≤—Å—ë ‚Äî –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫–∏",
        reply_markup=kb(),
    )

# --- Reply keyboard handlers ---
@DP.message(F.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
async def btn_start(msg: Message):
    if STATE.is_trading:
        await msg.answer("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞", reply_markup=kb())
        return
    STATE.is_trading = True
    STATE.current_regime = Regime.HOLD
    STATE.current_side = Side.NONE
    if STATE.loop_task and not STATE.loop_task.done():
        STATE.loop_task.cancel()
    STATE.loop_task = asyncio.create_task(trading_loop())
    await msg.answer(f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤: {'–õ–û–ö–ê–õ–¨–ù–´–ô' if USE_LOCAL_DECIDER else '–ò–ò'}", reply_markup=kb())

@DP.message(F.text == "‚èπÔ∏è –°—Ç–æ–ø")
async def btn_stop(msg: Message):
    STATE.is_trading = False
    try:
        bybit_cancel_all(STATE.symbol)
    except Exception:
        pass
    await market_close_all(STATE.symbol)
    await msg.answer("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã", reply_markup=kb())

@DP.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def btn_balance(msg: Message):
    bal = bybit_wallet_usdt()
    await msg.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{bal:.2f} USDT</b>", parse_mode=ParseMode.HTML, reply_markup=kb())

@DP.message(F.text == "üö´ –ó–∞–∫—Ä—ã—Ç—å –≤—Å—ë")
async def btn_close_all(msg: Message):
    try:
        bybit_cancel_all(STATE.symbol)
    except Exception:
        pass
    await market_close_all(STATE.symbol)
    await msg.answer("üö´ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã", reply_markup=kb())

# ------------------ Entry ------------------
async def main():
    log.info("Starting Bybit AI Trading Bot‚Ä¶")
    if not BOT:
        log.error("No TELEGRAM_BOT_TOKEN provided")
        return
    await tg_send("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –°—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏.\n" +
                  f"–°–∏–º–≤–æ–ª: <b>{STATE.symbol}</b>, –õ–µ–≤–µ—Ä–∏–¥–∂: <b>{LEVERAGE}x</b>\n" +
                  ("–¢–ï–°–¢–ù–ï–¢" if os.getenv("BYBIT_TESTNET","true").lower()=="true" else "–†–ï–ê–õ") +
                  f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤: <b>{'–õ–û–ö–ê–õ–¨–ù–´–ô' if USE_LOCAL_DECIDER else '–ò–ò'}</b>")
    await DP.start_polling(BOT)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Stopped.")